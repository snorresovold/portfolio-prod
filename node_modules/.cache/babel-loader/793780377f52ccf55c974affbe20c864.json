{"ast":null,"code":"import React, { useRef, useEffect, memo } from 'react';\n\nasync function type(node) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  for (const arg of args) {\n    switch (typeof arg) {\n      case 'string':\n        await edit(node, arg);\n        break;\n\n      case 'number':\n        await wait(arg);\n        break;\n\n      case 'function':\n        await arg(node, ...args);\n        break;\n\n      default:\n        await arg;\n    }\n  }\n}\n\nasync function edit(node, text) {\n  const overlap = getOverlap(node.textContent, text);\n  await perform(node, [...deleter(node.textContent, overlap), ...writer(text, overlap)]);\n}\n\nasync function wait(ms) {\n  await new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function perform(node, edits) {\n  let speed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60;\n\n  for (const op of editor(edits)) {\n    op(node);\n    await wait(speed + speed * (Math.random() - 0.5));\n  }\n}\n\nfunction* editor(edits) {\n  for (const edit of edits) {\n    yield node => requestAnimationFrame(() => node.textContent = edit);\n  }\n}\n\nfunction* writer(_ref2) {\n  let [...text] = _ref2;\n  let startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let endIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : text.length;\n\n  while (startIndex < endIndex) {\n    yield text.slice(0, ++startIndex).join('');\n  }\n}\n\nfunction* deleter(_ref3) {\n  let [...text] = _ref3;\n  let startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let endIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : text.length;\n\n  while (endIndex > startIndex) {\n    yield text.slice(0, --endIndex).join('');\n  }\n}\n\nfunction getOverlap(start, _ref4) {\n  let [...end] = _ref4;\n  return [...start, NaN].findIndex((char, i) => end[i] !== char);\n}\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css = \".styles_typicalWrapper__1_Uvh::after {\\n  content: \\\"|\\\";\\n  animation: styles_blink__2CKyC 1s infinite step-start;\\n}\\n\\n@keyframes styles_blink__2CKyC {\\n  50% { opacity: 0; }\\n}\";\nvar styles = {\n  \"typicalWrapper\": \"styles_typicalWrapper__1_Uvh\",\n  \"blink\": \"styles_blink__2CKyC\"\n};\nstyleInject(css);\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nvar Typical = function Typical(_ref) {\n  var steps = _ref.steps,\n      loop = _ref.loop,\n      className = _ref.className,\n      _ref$wrapper = _ref.wrapper,\n      wrapper = _ref$wrapper === undefined ? \"p\" : _ref$wrapper;\n  var typicalRef = useRef(null);\n  var Component = wrapper;\n  var classNames = [styles.typicalWrapper];\n\n  if (className) {\n    classNames.unshift(className);\n  }\n\n  useEffect(function () {\n    if (loop === Infinity) {\n      type.apply(undefined, [typicalRef.current].concat(toConsumableArray(steps), [type]));\n    } else if (typeof loop === \"number\") {\n      type.apply(undefined, [typicalRef.current].concat(toConsumableArray(Array(loop).fill(steps).flat())));\n    } else {\n      type.apply(undefined, [typicalRef.current].concat(toConsumableArray(steps)));\n    }\n  });\n  return React.createElement(Component, {\n    ref: typicalRef,\n    className: classNames.join(' ')\n  });\n};\n\nvar index = memo(Typical);\nexport default index;","map":{"version":3,"sources":["../node_modules/@camwiegert/typical/typical.js","../node_modules/style-inject/dist/style-inject.es.js","../src/index.js"],"names":["Typical","steps","loop","className","wrapper","typicalRef","useRef","Component","classNames","styles","Array","memo"],"mappings":"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","sourcesContent":["export async function type(node, ...args) {\n    for (const arg of args) {\n        switch (typeof arg) {\n            case 'string':\n                await edit(node, arg);\n                break;\n            case 'number':\n                await wait(arg);\n                break;\n            case 'function':\n                await arg(node, ...args);\n                break;\n            default:\n                await arg;\n        }\n    }\n}\n\nasync function edit(node, text) {\n    const overlap = getOverlap(node.textContent, text);\n    await perform(node, [...deleter(node.textContent, overlap), ...writer(text, overlap)]);\n}\n\nasync function wait(ms) {\n    await new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function perform(node, edits, speed = 60) {\n    for (const op of editor(edits)) {\n        op(node);\n        await wait(speed + speed * (Math.random() - 0.5));\n    }\n}\n\nexport function* editor(edits) {\n    for (const edit of edits) {\n        yield (node) => requestAnimationFrame(() => node.textContent = edit);\n    }\n}\n\nexport function* writer([...text], startIndex = 0, endIndex = text.length) {\n    while (startIndex < endIndex) {\n        yield text.slice(0, ++startIndex).join('');\n    }\n}\n\nexport function* deleter([...text], startIndex = 0, endIndex = text.length) {\n    while (endIndex > startIndex) {\n        yield text.slice(0, --endIndex).join('');\n    }\n}\n\nexport function getOverlap(start, [...end]) {\n    return [...start, NaN].findIndex((char, i) => end[i] !== char);\n}\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","\nimport React, { useRef, useEffect, memo } from \"react\";\nimport { type, type as loopedType } from \"@camwiegert/typical\";\n\nimport styles from './styles.css'\n\nconst Typical = ({ steps, loop, className, wrapper = \"p\" }) => {\n  const typicalRef = useRef(null);\n  const Component = wrapper;\n  const classNames = [styles.typicalWrapper];\n  \n  if (className) {\n    classNames.unshift(className);\n  }\n\n  useEffect(() => {\n    if (loop === Infinity) {\n      type(typicalRef.current, ...steps, loopedType);\n    } else if (typeof loop === \"number\") {\n      type(\n        typicalRef.current,\n        ...Array(loop)\n          .fill(steps)\n          .flat()\n      );\n    } else {\n      type(typicalRef.current, ...steps);\n    }\n  });\n\n  return <Component ref={typicalRef} className={classNames.join(' ')}/>;\n}\n\nexport default memo(Typical)\n"]},"metadata":{},"sourceType":"module"}